{"version":3,"sources":["Component/Header.js","Component/Service.js","Component/Context.js","Component/Add.js","Component/List.js","Component/View.js","Component/Edit.js","App.js","serviceWorker.js","index.js"],"names":["Header","useState","isOpen","setIsOpen","Navbar","color","light","expand","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","to","Service","addData","payload","axios","post","then","catch","err","console","log","getData","get","response","status","data","deleteData","editData","updatData","Consumer","createContext","initialtask","reducer","task","action","type","Provider","props","useReducer","setlist","value","children","Add","useContext","name","title","duration","desc","formdata","setformdata","addlist","a","newTask","onChange","e","target","placeholder","List","ondelete","id","_id","View","length","res","map","key","Edit","useEffect","match","params","newtask","Task","fetchData","oninput","updatelist","App","basename","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"iRAUe,SAASA,IAAU,IAAD,EACDC,oBAAS,GADR,mBACtBC,EADsB,KACdC,EADc,KAK7B,OACE,6BACE,kBAACC,EAAA,EAAD,CAAQC,MAAM,QAAQC,OAAK,EAACC,OAAO,MACjC,kBAACC,EAAA,EAAD,CAAeC,QALN,kBAAMN,GAAWD,MAM1B,kBAACQ,EAAA,EAAD,CAAUR,OAAQA,EAAQS,QAAM,GAC9B,kBAACC,EAAA,EAAD,CAAKC,UAAU,UAAUF,QAAM,GAC7B,kBAACG,EAAA,EAAD,KACE,kBAAC,IAAD,CAAMD,UAAU,WAAWE,GAAG,aAA9B,kBAEF,kBAACD,EAAA,EAAD,KACE,kBAAC,IAAD,CAAMD,UAAU,WAAWE,GAAG,cAA9B,uB,sECxBKC,E,sCACjBC,QAAQ,SAACC,GACL,OAAOC,IAAMC,KAAK,6BAA6BF,GAC9CG,MAAK,eACLC,OAAM,SAACC,GACJC,QAAQC,IAAIF,O,KAIpBG,QAAQ,WACJ,OAAOP,IAAMQ,IAAI,8BAChBN,MAAK,SAAAO,GACF,GAAoB,KAAjBA,EAASC,OACR,OAAOD,EAASE,QAGvBR,OAAM,SAACC,GACJC,QAAQC,IAAIF,O,KAMpBQ,WAAW,SAACb,GACT,OAAOC,IAAMQ,IAAN,uCAA0CT,IAChDG,MAAK,eACLC,OAAM,SAACC,GACHC,QAAQC,IAAIF,O,KAIpBS,SAAS,SAACd,GACN,OAAOC,IAAMQ,IAAN,qCAAwCT,IAC9CG,MAAK,SAAAO,GACF,GAAoB,KAAjBA,EAASC,OACR,OAAOD,EAASE,QAGvBR,OAAM,SAACC,GACJC,QAAQC,IAAIF,O,KAGpBU,UAAU,SAACf,GAEP,OADAM,QAAQC,IAAIP,GACLC,IAAMC,KAAN,+BAA0CF,GAChDG,MAAK,eACLC,OAAM,SAACC,GACJC,QAAQC,IAAIF,QC9CXW,EAASC,0BAChBC,EAAY,GACZC,EAAQ,SAACC,EAAKC,GAChB,OAAOA,EAAOC,MACV,IAAK,YACD,OAAYD,EAAOrB,QACvB,QACI,OAAOoB,IAGZ,SAASG,EAASC,GAAQ,IAAD,EACPC,qBAAWN,EAAQD,GADZ,mBACrBE,EADqB,KAChBM,EADgB,KAE5B,OACI,kBAACV,EAASO,SAAV,CAAmBI,MAAO,CAACP,EAAKM,IAC3BF,EAAMI,UCZJ,SAASC,IAAO,IAAD,EACLC,qBAAWd,GADN,mBACdU,GADc,aAEG3C,mBAAS,CAACgD,KAAK,GAAGC,MAAM,GAAGC,SAAS,GAAGC,KAAK,KAF/C,mBAEnBC,EAFmB,KAEVC,EAFU,KAQpBC,EAAO,uCAAC,4BAAAC,EAAA,yDACQ,IAAfH,EAASJ,KADF,gBAENzB,QAAQC,IAAI,qBAFN,wCAcA,IAAIT,GAAUC,QAAQoC,GAdtB,wBAec,IAAIrC,GAAUU,UAf5B,OAeA+B,EAfA,OAgBNb,EAAQ,CAACJ,KAAK,YAAatB,QAASuC,IACpCH,EAAY,2BAAID,GAAL,IAAcJ,KAAK,GAAGC,MAAM,GAAGC,SAAS,GAAGC,KAAK,MAjBrD,4CAAD,qDAoBb,OACI,yBAAKvC,UAAU,aACX,wBAAIA,UAAU,8BAAd,iBACA,yBAAKA,UAAU,cAEX,2BAAOA,UAAU,eAAe2B,KAAK,OAAOS,KAAK,OAAOS,SA7BtD,SAACC,GACXL,EAAY,2BAAID,GAAL,kBAAeM,EAAEC,OAAOX,KAAMU,EAAEC,OAAOf,UA4BiCgB,YAAY,YAAYhB,MAAOQ,EAASJ,QAcvH,yBAAKpC,UAAU,eACf,4BAAQA,UAAU,eAAeJ,QAAS8C,GAA1C,cC9CG,SAASO,EAAKpB,GAAQ,IAAD,EACXM,qBAAWd,GADA,mBACpBU,GADoB,WAG1BmB,EAAQ,uCAAC,WAAMC,GAAN,eAAAR,EAAA,uEACL,IAAIxC,GAAUe,WAAWiC,GADpB,wBAES,IAAIhD,GAAUU,UAFvB,OAEL+B,EAFK,OAGXb,EAAQ,CAACJ,KAAK,YAAatB,QAASuC,IAHzB,2CAAD,sDAMd,OACI,oCACI,4BAAKf,EAAMZ,KAAKmB,MAChB,4BAAKP,EAAMZ,KAAKoB,OAChB,4BAAKR,EAAMZ,KAAKqB,UAChB,4BAAKT,EAAMZ,KAAKsB,MAChB,4BACI,4BAAQvC,UAAU,qBAAqBJ,QAAS,WAAKsD,EAASrB,EAAMZ,KAAKmC,OAAzE,YClBD,SAASC,IAAQ,IAAD,EACNlB,qBAAWd,GADL,mBACpBI,EADoB,KACfM,EADe,KAO3B,OALgB,GAAbN,EAAK6B,SACJ,IAAInD,GAAUU,UAAUL,MAAK,SAAA+C,GACzBxB,EAAQ,CAACJ,KAAK,YAAYtB,QAAQkD,OAItC,yBAAKvD,UAAU,cACZ,wBAAIA,UAAU,2CAAd,aACA,yBAAKA,UAAU,OACf,2BAAOA,UAAU,SAChB,+BACI,4BACI,oCAIA,wCAGR,+BACIyB,EAAK+B,KAAI,SAACvC,GAAD,OACN,wBAAIwC,IAAKxC,EAAKmC,KACd,kBAACH,EAAD,CAAMhC,KAAMA,YCzBhB,SAASyC,EAAKH,GAAM,IAAD,EAETpB,qBAAWd,GAFF,mBAElBU,GAFkB,aAGD3C,mBAAS,CAACgD,KAAK,GAAGC,MAAM,GAAGC,SAAS,GAAGC,KAAK,KAH3C,mBAGvBC,EAHuB,KAGdC,EAHc,KAK9BkB,qBAAU,WAAI,4CACV,8BAAAhB,EAAA,uEAEwB,IAAIxC,GAAUgB,SAASoC,EAAIK,MAAMC,OAAOV,IAFhE,cAEUW,EAFV,OAGIrB,EAAY,2BAAID,GAAL,IAAcW,GAAGW,EAAQV,IAAIhB,KAAK0B,EAAQ1B,KAAKC,MAAMyB,EAAQzB,MAAMC,SAASwB,EAAQxB,SAASC,KAAKuB,EAAQvB,QAHzH,UAIqB,IAAIpC,GAAUU,UAJnC,OAIUkD,EAJV,OAKIhC,EAAQ,CAACJ,KAAK,YAAatB,QAAS0D,IALxC,4CADU,uBAAC,WAAD,wBAQVC,KACF,IAEF,IAAMC,EAAQ,SAACnB,GACXL,EAAY,2BAAID,GAAL,kBAAeM,EAAEC,OAAOX,KAAMU,EAAEC,OAAOf,UAGhDkC,EAAU,uCAAC,4BAAAvB,EAAA,uEACP,IAAIxC,GAAUiB,UAAUoB,GADjB,wBAEO,IAAIrC,GAAUU,UAFrB,OAEP+B,EAFO,OAGbb,EAAQ,CAACJ,KAAK,YAAatB,QAASuC,IAHvB,2CAAD,qDAKhB,OACI,yBAAK5C,UAAU,aACX,wBAAIA,UAAU,8BAAd,kBACA,yBAAKA,UAAU,cACX,wCACA,2BAAOA,UAAU,eAAe2B,KAAK,OAAOS,KAAK,OAAOS,SAAUoB,EAASjC,MAAOQ,EAASJ,QAE/F,yBAAKpC,UAAU,cACX,8CACA,2BAAOA,UAAU,eAAe2B,KAAK,OAAOS,KAAK,QAAQS,SAAUoB,EAASjC,MAAOQ,EAASH,SAEhG,yBAAKrC,UAAU,cACX,4CACA,2BAAOA,UAAU,eAAe2B,KAAK,OAAOS,KAAK,WAAWS,SAAUoB,EAASjC,MAAOQ,EAASF,YAEnG,yBAAKtC,UAAU,cACX,oDACA,2BAAOA,UAAU,eAAe2B,KAAK,OAAOS,KAAK,OAAOS,SAAUoB,EAASjC,MAAOQ,EAASD,QAE/F,yBAAKvC,UAAU,eACf,4BAAQA,UAAU,eAAgBJ,QAASsE,GAA3C,iB,WCzBGC,MAhBf,WACE,OACE,kBAAC,IAAD,CAAYC,SAAS,KAEnB,kBAACxC,EAAD,KAEE,kBAAC,IAAD,CAAOyC,KAAK,IAAIC,UAAWnF,IAC3B,kBAAC,IAAD,CAAOkF,KAAK,YAAYC,UAAWpC,IACnC,kBAAC,IAAD,CAAOmC,KAAK,iBAAiBC,UAAWZ,IACxC,kBAAC,IAAD,CAAOW,KAAK,aAAaC,UAAWjB,OCJxBkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASd,MACvB,2D,MCZNe,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1E,MAAK,SAAA2E,GACJA,EAAaC,gBAEd3E,OAAM,SAAA4E,GACL1E,QAAQ0E,MAAMA,EAAMC,c","file":"static/js/main.98062779.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  Nav,\r\n  NavItem,\r\n} from 'reactstrap';\r\n\r\nexport default function Header() {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n\r\n    const toggle = () => setIsOpen(!isOpen);\r\n  \r\n    return (\r\n      <div>\r\n        <Navbar color=\"light\" light expand=\"md\">\r\n          <NavbarToggler onClick={toggle} />\r\n          <Collapse isOpen={isOpen} navbar>\r\n            <Nav className=\"mx-auto\" navbar>\r\n              <NavItem>\r\n                <Link className=\"nav-link\" to=\"/add-list\">Add Task List</Link>\r\n              </NavItem>\r\n              <NavItem>\r\n                <Link className=\"nav-link\" to=\"/view-list\">View Task List</Link>\r\n              </NavItem>\r\n            </Nav>\r\n          </Collapse>\r\n        </Navbar>\r\n      </div>\r\n    );\r\n}","import axios from 'axios';\r\nexport default class Service {\r\n    addData=(payload)=>{\r\n        return axios.post('http://localhost:8080/save',payload)\r\n        .then(()=>{})\r\n        .catch((err)=>{\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n    getData=()=>{\r\n        return axios.get('http://localhost:8080/view')\r\n        .then(response => {\r\n            if(response.status==200){\r\n                return response.data;\r\n            }\r\n        })\r\n        .catch((err)=>{\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n  \r\n\r\n    deleteData=(payload)=>{\r\n       return axios.get(`http://localhost:8080/delete/${payload}`)\r\n       .then(()=>{})\r\n       .catch((err)=>{\r\n            console.log(err)\r\n       })\r\n   }\r\n\r\n    editData=(payload)=>{\r\n        return axios.get(`http://localhost:8080/edit/${payload}`)\r\n        .then(response=>{\r\n            if(response.status==200){\r\n                return response.data;\r\n            }\r\n        })\r\n        .catch((err)=>{\r\n            console.log(err)\r\n        })\r\n    }\r\n    updatData=(payload)=>{\r\n        console.log(payload)\r\n        return axios.post(`http://localhost:8080/update`,payload)\r\n        .then(()=>{})\r\n        .catch((err)=>{\r\n            console.log(err)\r\n        })\r\n    }\r\n}\r\n","import React,{createContext,useReducer} from 'react'\r\n\r\nexport const Consumer=createContext();\r\nconst initialtask=[];\r\nconst reducer=(task,action)=>{\r\n    switch(action.type){\r\n        case 'VIEW_TASK':\r\n            return task=action.payload\r\n        default:\r\n            return task;\r\n    }\r\n}\r\nexport function Provider(props) {\r\n    const [task,setlist]=useReducer(reducer,initialtask)\r\n    return (\r\n        <Consumer.Provider value={[task,setlist]}>\r\n            {props.children}\r\n        </Consumer.Provider>\r\n    )\r\n}\r\n\r\n\r\n","\r\nimport React,{useState,useContext} from 'react'\r\nimport Service from './Service'\r\nimport {Consumer} from './Context'\r\nexport default function Add() {\r\n    const [task,setlist]=useContext(Consumer)\r\n    const [formdata,setformdata]=useState({name:\"\",title:\"\",duration:\"\",desc:\"\"})\r\n    \r\n    const oninput=(e)=>{\r\n        setformdata({...formdata,[e.target.name]:e.target.value})\r\n    }\r\n\r\n    const addlist=async()=>{\r\n        if(formdata.name==\"\"){\r\n            console.log(\"name is required!\")\r\n        }\r\n        // if(formdata.title==\"\"){\r\n        // console.log(\"title is required!\")\r\n        // }\r\n        // if(formdata.duration==\"\"){\r\n        //     console.log(\"duration is required!\")\r\n        //     }\r\n        // if(formdata.desc==\"\"){\r\n        //     console.log(\"Desc is required!\")\r\n        // }\r\n        else{\r\n            await new Service().addData(formdata);\r\n            const newTask=await new Service().getData();\r\n            setlist({type:\"VIEW_TASK\", payload: newTask})\r\n            setformdata({...formdata,name:\"\",title:\"\",duration:\"\",desc:\"\"})\r\n                }\r\n    }\r\n    return (\r\n        <div className=\"container\">\r\n            <h1 className=\"text-center my-5 text-info\" >Add Task List</h1>\r\n            <div className=\"form-group\">\r\n               \r\n                <input className=\"form-control\" type=\"text\" name=\"name\" onChange={oninput} placeholder=\"Task Name\" value={formdata.name}></input>\r\n            </div>\r\n            {/* <div className=\"form-group\">\r\n                <label>Task Title:</label>\r\n                <input className=\"form-control\" type=\"text\" name=\"title\" onChange={oninput} value={formdata.title}></input>\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <label>Duration:</label>\r\n                <input className=\"form-control\" type=\"text\" name=\"duration\" onChange={oninput} value={formdata.duration}></input>\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <label>Task Description:</label>\r\n                <input className=\"form-control\" type=\"text\" name=\"desc\" onChange={oninput} value={formdata.desc}></input>\r\n            </div>*/}\r\n            <div className=\"text-center\">\r\n            <button className=\"btn btn-info\" onClick={addlist}>Add Task</button>\r\n            </div> \r\n        </div>\r\n    )\r\n}\r\n\r\n// const addlist=()=>{\r\n//     const id=task.length+1;\r\n//     setlist(task=>[...task, {id:id, ...formdata}])\r\n//     setformdata({...formdata,name:\"\",title:\"\",duration:\"\",desc:\"\"})\r\n// }","import React,{useContext} from 'react'\r\nimport {Consumer} from './Context';\r\nimport Service from './Service';\r\n\r\nimport {Link} from 'react-router-dom';\r\n\r\nexport default function List(props) {\r\n    const [task,setlist]=useContext(Consumer)\r\n\r\n    const ondelete=async(id)=>{\r\n        await new Service().deleteData(id);\r\n        const newTask=await new Service().getData();\r\n        setlist({type:\"VIEW_TASK\", payload: newTask})\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <td>{props.data.name}</td>\r\n            <td>{props.data.title}</td>\r\n            <td>{props.data.duration}</td>\r\n            <td>{props.data.desc}</td>\r\n            <td>\r\n                <button className=\"btn btn-danger m-2\" onClick={()=>{ondelete(props.data._id)}}>Delete</button>\r\n                {/* <Link className=\"btn btn-info m-2\" to={\"/edit-list/\"+props.data._id}>Edit</Link> */}\r\n            </td>\r\n        </>\r\n    )\r\n}\r\n","import React,{useContext} from 'react'\r\nimport {Consumer} from './Context';\r\nimport List from './List';\r\nimport Service from './Service';\r\nexport default function View() {\r\n    const [task,setlist]=useContext(Consumer)\r\n    if(task.length==0){\r\n        new Service().getData().then(res=>{\r\n            setlist({type:'VIEW_TASK',payload:res})\r\n        })\r\n    }\r\n    return (\r\n        <div className=\"container \">\r\n           <h1 className=\"text-center text-primary text-info my-3\">Task list</h1>\r\n           <div className=\"row\">\r\n           <table className=\"table\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Name</th>\r\n                    {/* <th>Title</th>\r\n                    <th>Duration</th>\r\n                    <th>Description</th> */}\r\n                    <th>Action</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n               {task.map((data)=>(\r\n                   <tr key={data._id}>\r\n                   <List data={data} ></List>\r\n                   </tr>\r\n                ))}\r\n            </tbody>\r\n            </table>\r\n           </div>\r\n        </div>\r\n    )\r\n}\r\n","import React,{useState,useContext,useEffect} from 'react'\r\nimport Service from './Service'\r\nimport {Consumer} from './Context'\r\nexport default function Edit(res) {\r\n    \r\n    const [task,setlist]=useContext(Consumer)\r\n    const [formdata,setformdata]=useState({name:\"\",title:\"\",duration:\"\",desc:\"\"})\r\n\r\n    useEffect(()=>{\r\n        async function fetchData()\r\n        {\r\n            const newtask=await new Service().editData(res.match.params.id);\r\n            setformdata({...formdata,id:newtask._id,name:newtask.name,title:newtask.title,duration:newtask.duration,desc:newtask.desc})\r\n            const Task=await new Service().getData();\r\n            setlist({type:\"VIEW_TASK\", payload: Task})\r\n        }\r\n        fetchData();\r\n    },[])\r\n\r\n    const oninput=(e)=>{\r\n        setformdata({...formdata,[e.target.name]:e.target.value})\r\n    }\r\n\r\n    const updatelist=async()=>{\r\n        await new Service().updatData(formdata);\r\n        const newTask=await new Service().getData();\r\n        setlist({type:\"VIEW_TASK\", payload: newTask})\r\n    }\r\n    return (\r\n        <div className=\"container\">\r\n            <h1 className=\"text-center my-5 text-info\" >Edit Task List</h1>\r\n            <div className=\"form-group\">\r\n                <label>Name:</label>\r\n                <input className=\"form-control\" type=\"text\" name=\"name\" onChange={oninput} value={formdata.name}></input>\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <label>Task Title:</label>\r\n                <input className=\"form-control\" type=\"text\" name=\"title\" onChange={oninput} value={formdata.title}></input>\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <label>Duration:</label>\r\n                <input className=\"form-control\" type=\"text\" name=\"duration\" onChange={oninput} value={formdata.duration}></input>\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <label>Task Description:</label>\r\n                <input className=\"form-control\" type=\"text\" name=\"desc\" onChange={oninput} value={formdata.desc}></input>\r\n            </div>\r\n            <div className=\"text-center\">\r\n            <button className=\"btn btn-info\"  onClick={updatelist}>Update Task</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport Header from './Component/Header';\nimport Add from './Component/Add';\nimport View from './Component/View';\nimport Edit from './Component/Edit';\nimport {Provider} from './Component/Context';\nimport {BrowserRouter as Router,Route,HashRouter} from 'react-router-dom';\nfunction App() {\n  return (\n    <HashRouter basename='/'>\n    {/* <Router> */}\n      <Provider>\n      \n        <Route path='/' component={Header}></Route>\n        <Route path='/add-list' component={Add}></Route>\n        <Route path='/edit-list/:id' component={Edit}></Route>\n        <Route path='/view-list' component={View}></Route>\n      \n      </Provider>\n      {/* </Router> */}\n      </HashRouter>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}